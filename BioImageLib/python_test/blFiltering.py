# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_blFiltering', [dirname(__file__)])
        except ImportError:
            import _blFiltering
            return _blFiltering
        if fp is not None:
            try:
                _mod = imp.load_module('_blFiltering', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _blFiltering = swig_import_helper()
    del swig_import_helper
else:
    import _blFiltering
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class blProcessObserver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, blProcessObserver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, blProcessObserver, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def updateInfo(self, *args): return _blFiltering.blProcessObserver_updateInfo(self, *args)
    def updateWarning(self, *args): return _blFiltering.blProcessObserver_updateWarning(self, *args)
    def updateProgress(self, *args): return _blFiltering.blProcessObserver_updateProgress(self, *args)
    __swig_destroy__ = _blFiltering.delete_blProcessObserver
    __del__ = lambda self : None;
blProcessObserver_swigregister = _blFiltering.blProcessObserver_swigregister
blProcessObserver_swigregister(blProcessObserver)

class blProcessObservable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, blProcessObservable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, blProcessObservable, name)
    __repr__ = _swig_repr
    def notify(self, *args): return _blFiltering.blProcessObservable_notify(self, *args)
    def notifyProgress(self, *args): return _blFiltering.blProcessObservable_notifyProgress(self, *args)
    def notifyWarning(self, *args): return _blFiltering.blProcessObservable_notifyWarning(self, *args)
    def addObserver(self, *args): return _blFiltering.blProcessObservable_addObserver(self, *args)
    def addObservers(self, *args): return _blFiltering.blProcessObservable_addObservers(self, *args)
    def removeObserver(self, *args): return _blFiltering.blProcessObservable_removeObserver(self, *args)
    def __init__(self): 
        this = _blFiltering.new_blProcessObservable()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blFiltering.delete_blProcessObservable
    __del__ = lambda self : None;
blProcessObservable_swigregister = _blFiltering.blProcessObservable_swigregister
blProcessObservable_swigregister(blProcessObservable)

class blProcessObserverCommandeLine(blProcessObserver):
    __swig_setmethods__ = {}
    for _s in [blProcessObserver]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, blProcessObserverCommandeLine, name, value)
    __swig_getmethods__ = {}
    for _s in [blProcessObserver]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, blProcessObserverCommandeLine, name)
    __repr__ = _swig_repr
    def updateInfo(self, *args): return _blFiltering.blProcessObserverCommandeLine_updateInfo(self, *args)
    def updateProgress(self, *args): return _blFiltering.blProcessObserverCommandeLine_updateProgress(self, *args)
    def updateWarning(self, *args): return _blFiltering.blProcessObserverCommandeLine_updateWarning(self, *args)
    def __init__(self): 
        this = _blFiltering.new_blProcessObserverCommandeLine()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blFiltering.delete_blProcessObserverCommandeLine
    __del__ = lambda self : None;
blProcessObserverCommandeLine_swigregister = _blFiltering.blProcessObserverCommandeLine_swigregister
blProcessObserverCommandeLine_swigregister(blProcessObserverCommandeLine)

class blProcessObserverNull(blProcessObserver):
    __swig_setmethods__ = {}
    for _s in [blProcessObserver]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, blProcessObserverNull, name, value)
    __swig_getmethods__ = {}
    for _s in [blProcessObserver]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, blProcessObserverNull, name)
    __repr__ = _swig_repr
    def updateInfo(self, *args): return _blFiltering.blProcessObserverNull_updateInfo(self, *args)
    def updateProgress(self, *args): return _blFiltering.blProcessObserverNull_updateProgress(self, *args)
    def updateWarning(self, *args): return _blFiltering.blProcessObserverNull_updateWarning(self, *args)
    def __init__(self): 
        this = _blFiltering.new_blProcessObserverNull()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blFiltering.delete_blProcessObserverNull
    __del__ = lambda self : None;
blProcessObserverNull_swigregister = _blFiltering.blProcessObserverNull_swigregister
blProcessObserverNull_swigregister(blProcessObserverNull)

class blProcess(blProcessObservable):
    __swig_setmethods__ = {}
    for _s in [blProcessObservable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, blProcess, name, value)
    __swig_getmethods__ = {}
    for _s in [blProcessObservable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, blProcess, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _blFiltering.new_blProcess()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blFiltering.delete_blProcess
    __del__ = lambda self : None;
    def name(self): return _blFiltering.blProcess_name(self)
blProcess_swigregister = _blFiltering.blProcess_swigregister
blProcess_swigregister(blProcess)

class blFilter(blProcess):
    __swig_setmethods__ = {}
    for _s in [blProcess]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, blFilter, name, value)
    __swig_getmethods__ = {}
    for _s in [blProcess]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, blFilter, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _blFiltering.delete_blFilter
    __del__ = lambda self : None;
    def name(self): return _blFiltering.blFilter_name(self)
    def setInput(self, *args): return _blFiltering.blFilter_setInput(self, *args)
    def run(self): return _blFiltering.blFilter_run(self)
    def output(self): return _blFiltering.blFilter_output(self)
blFilter_swigregister = _blFiltering.blFilter_swigregister
blFilter_swigregister(blFilter)

class blBilateralFilter(blFilter):
    __swig_setmethods__ = {}
    for _s in [blFilter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, blBilateralFilter, name, value)
    __swig_getmethods__ = {}
    for _s in [blFilter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, blBilateralFilter, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _blFiltering.new_blBilateralFilter()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blFiltering.delete_blBilateralFilter
    __del__ = lambda self : None;
    def name(self): return _blFiltering.blBilateralFilter_name(self)
    def run(self): return _blFiltering.blBilateralFilter_run(self)
    def setDomainSigma(self, *args): return _blFiltering.blBilateralFilter_setDomainSigma(self, *args)
    def setRangeSigma(self, *args): return _blFiltering.blBilateralFilter_setRangeSigma(self, *args)
blBilateralFilter_swigregister = _blFiltering.blBilateralFilter_swigregister
blBilateralFilter_swigregister(blBilateralFilter)

class blMedianFilter(blFilter):
    __swig_setmethods__ = {}
    for _s in [blFilter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, blMedianFilter, name, value)
    __swig_getmethods__ = {}
    for _s in [blFilter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, blMedianFilter, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _blFiltering.new_blMedianFilter()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blFiltering.delete_blMedianFilter
    __del__ = lambda self : None;
    def name(self): return _blFiltering.blMedianFilter_name(self)
    def setRadius(self, *args): return _blFiltering.blMedianFilter_setRadius(self, *args)
    def run(self): return _blFiltering.blMedianFilter_run(self)
    __swig_setmethods__["m_radius"] = _blFiltering.blMedianFilter_m_radius_set
    __swig_getmethods__["m_radius"] = _blFiltering.blMedianFilter_m_radius_get
    if _newclass:m_radius = _swig_property(_blFiltering.blMedianFilter_m_radius_get, _blFiltering.blMedianFilter_m_radius_set)
blMedianFilter_swigregister = _blFiltering.blMedianFilter_swigregister
blMedianFilter_swigregister(blMedianFilter)

# This file is compatible with both classic and new-style classes.


